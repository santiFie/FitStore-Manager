<%= link_to "Volver", sales_path, class: "submit-button" %>
<%= form_with(model: @sale, local: true, id: 'sale-form', data: { turbo:false }) do |sale_form| %>

    <% if @sale.errors.any? %>
        <div id="error_explanation" class="errors-container">
            <h2 class="error-title"><%= pluralize(@sale.errors.count, "error") %> impidieron que se guardara esta venta:</h2>
            <ul>
                <% @sale.errors.full_messages.each do |message| %>
                    <li class="error-message"><%= message %></li>
                <% end %>
            </ul>
        </div>
    <% end %>

    <div class="flex-container">
        <div class="left-container">
            <div class="sale_form-container">
                <h2>Datos del Cliente</h2>
                <%= sale_form.fields_for :client do |client_form| %>
                    <% if @sale.client.errors.any? %>
                        <div id="error_explanation" class="errors-container">
                            <h2 class="error-title"><%= pluralize(@sale.client.errors.count, "error") %> impidieron que se guardara este cliente:</h2>
                            <ul>
                                <% @sale.client.errors.full_messages.each do |message| %>
                                    <li class="error-message"><%= message %></li>
                                <% end %>
                            </ul>
                        </div>
                    <% end %>

                    <div class="field">
                        <%= client_form.label :dni, "DNI", class: 'form-label' %>
                        <%= client_form.text_field :dni, class: 'form-input' %>
                    </div>

                    <div class="field">
                        <%= client_form.label :first_name, "Nombre del cliente", class: 'form-label' %>
                        <%= client_form.text_field :first_name, class: 'form-input' %>
                    </div>

                    <div class="field">
                        <%= client_form.label :last_name, "Apellido del cliente", class: 'form-label' %>
                        <%= client_form.text_field :last_name, class: 'form-input' %>
                    </div>

                    <div class="field">
                        <%= client_form.label :email, "Correo electrónico", class: 'form-label' %>
                        <%= client_form.email_field :email, class: 'form-input' %>
                    </div>

                    <div class="field">
                        <%= client_form.label :birth_date, "Fecha de nacimiento", class: 'form-label' %>
                        <%= client_form.date_field :birth_date, class: 'form-input' %>
                    </div>
                <% end %>

                <br>

                <div class="field">
                    <%= sale_form.label :sale_date, "Fecha de la venta", class: 'form-label' %>
                    <%= sale_form.date_field :sale_date, class: 'form-input' %>
                </div>
            </div>

            <div id="sale-items" class="sale_item_form-container">
                <%= sale_form.fields_for :sale_items do |sale_item_form| %>
                    <div id="sale-item-form">
                        <%= sale_item_form.label :product_id, "Producto", class: 'form-label' %>
                        <%= sale_item_form.text_field :product_id, 
                            list: "product_list", 
                            placeholder: "Selecciona un producto", 
                            value: "", 
                            class: 'form-input' %>
                        
                        <datalist id="product_list" class="field">
                            <% Product.all.each do |product| %>
                            <option data="<%= product.id %>" data-price="<%= product.unit_price %>">
                                <%= product.name %>
                            </option>
                            <% end %>
                        </datalist>

                        <div class="field">
                            <%= sale_item_form.label :quantity, "Cantidad", class: 'form-label' %>
                            <%= sale_item_form.number_field :quantity, min: 1, value: 1, class: 'form-input' %>
                        </div>

                        <div class="field">
                            <%= sale_item_form.label :subtotal, "Subtotal", class: 'form-label' %>
                            <%= sale_item_form.text_field :subtotal, readonly: true, value: 0, class: 'form-input' %>
                        </div>

                        <button type="button" class="add-item">Agregar producto</button>
                    </div>
                <% end %>
            </div>
        </div>

        <div class="right-container">
            <div class="table-container">
                <table class="items-table">
                    <thead>
                        <tr>
                            <th>Producto</th>
                            <th>Cantidad</th>
                            <th>Precio Unitario</th>
                            <th>Subtotal</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="added_products">
                        <% if @selected_products %>
                            <% @selected_products.each do |index, item| %>
                                <tr data-item-id="<%= index %>">
                                    <td>
                                        <%= hidden_field_tag "sale[sale_items_attributes][#{index}][product_id]", item.quantity %>
                                        <%= Product.find(item.product_id).name %>
                                    </td>
                                    <td>
                                        <%= hidden_field_tag "sale[sale_items_attributes][#{index}][quantity]", item.quantity %>
                                        <%= item.quantity %>
                                    </td>
                                    <td>
                                        <%= hidden_field_tag "sale[sale_items_attributes][#{index}][subtotal]", item.subtotal %>
                                        <%= number_to_currency(item.subtotal) %>
                                    </td>
                                    <td>
                                        <button type="button" class="delete-button">Eliminar</button>
                                    </td>
                                </tr>
                            <% end %>
                        <% else %>
                            <tr id="no-products">
                                <td colspan="5" class="text-center">No se han agregado productos</td>
                            </tr>
                        <% end %>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="3" class="text-right"><strong>Total:</strong></td>
                            <td colspan="2">
                                <%= sale_form.number_field :total, readonly: true, class: 'total-input', value: 0 %>
                            </td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>

    <div class="form-actions">
        <%= sale_form.submit "Crear Venta", class: 'submit-button' %>
    </div>

<% end %>


<script>
document.addEventListener('DOMContentLoaded', function() {
        
        // Variable para llevar el conteo de IDs únicos
        let uniqueIdCounter = 0;

        // Función para generar un ID único incremental
        function generateUniqueId() {
            return uniqueIdCounter++;
        }

        // Selección de elementos del DOM
        const productList = document.getElementById('product_list');
        const productInput = document.querySelector('input[list="product_list"]');
        const quantityInput = document.querySelector('input[name*="[quantity]"]');
        const subtotalInput = document.querySelector('input[name*="[subtotal]"]');
        const addSaleItemButton = document.querySelector('button.add-item');
        const addedProductsTable = document.getElementById('added_products');
        const saleForm = document.querySelector('form');

        // Función para actualizar subtotal
        function updateSubtotal() {
            const selectedOption = Array.from(productList.options)
                .find(option => option.value === productInput.value);
            
            const unitPrice = selectedOption ? parseFloat(selectedOption.dataset.price) : 0;
            const quantity = parseInt(quantityInput.value) || 0;
            const subtotal = unitPrice * quantity;
            
            subtotalInput.value = subtotal.toFixed(2);
        }

        // Función para actualizar total de la venta
        function updateTotal() {
            const subtotalCells = addedProductsTable.querySelectorAll('td[data-subtotal]');
            const totalInput = document.querySelector('input[name="sale[total]"]');
            
            let total = 0;
            subtotalCells.forEach(cell => {
                total += parseFloat(cell.dataset.subtotal) || 0;
            });
            
            totalInput.value = total.toFixed(2);
        }

        // Función para crear campos ocultos
        function createHiddenInput(name, value) {
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = name;
            input.value = value;
            return input;
        }

        // New function to add existing sale items
        function addExistingSaleItems() {
            const addedProductsTable = document.getElementById('added_products');
            const existingRows = addedProductsTable.querySelectorAll('tr[data-item-id]');
            
            // Remove the "no products" row if it exists
            const noProductsRow = document.getElementById('no-products');
            if (noProductsRow) {
                noProductsRow.remove();
            }

            // Process each existing row
            existingRows.forEach(row => {
                // Add delete button functionality to existing rows
                const deleteButton = row.querySelector('.delete-button');
                deleteButton.addEventListener('click', function() {
                    row.remove();
                    updateTotal();
                    
                    // Show "no products" message if table is empty
                    if (addedProductsTable.children.length === 0) {
                        const noProductsRow = document.createElement('tr');
                        noProductsRow.id = 'no-products';
                        noProductsRow.innerHTML = '<td colspan="5" class="text-center">No se han agregado productos</td>';
                        addedProductsTable.appendChild(noProductsRow);
                    }
                });
            });

            // Update total for existing items
            updateTotal();
        }

        // Call the function to add existing sale items
        addExistingSaleItems();

        // Función para formatear números como moneda
        function formatCurrency(number) {
            return new Intl.NumberFormat('es-AR', {
            style: 'currency',
            currency: 'ARS'
            }).format(number);
        }

        // Agregar eventos para cálculo dinámico de subtotal
        productInput.addEventListener('input', updateSubtotal);
        quantityInput.addEventListener('input', updateSubtotal);

        // Evento para botón de agregar producto
        addSaleItemButton.addEventListener('click', function(event) {
            event.preventDefault();

            const selectedOption = Array.from(productList.options)
                .find(option => option.value === productInput.value);
            
            if (!selectedOption) return;

            const uniqueId = generateUniqueId();
            const productId = selectedOption.getAttribute('data');
            const productName = selectedOption.value;
            const unitPrice = parseFloat(selectedOption.dataset.price);
            const quantity = parseInt(quantityInput.value) || 0;
            const subtotal = parseFloat(subtotalInput.value) || 0;

            if (quantity > 0 && subtotal > 0) {
                // Eliminar mensaje de "no productos" si existe
                const noProductsRow = document.getElementById('no-products');
                if (noProductsRow) {
                    noProductsRow.remove();
                }

                // Crear nueva fila
                const newRow = document.createElement('tr');
                newRow.dataset.itemId = uniqueId;
                
                // Crear campos ocultos
                const hiddenFields = [
                    createHiddenInput(`sale[sale_items_attributes][${uniqueId}][product_id]`, productId),
                    createHiddenInput(`sale[sale_items_attributes][${uniqueId}][quantity]`, quantity),
                    createHiddenInput(`sale[sale_items_attributes][${uniqueId}][subtotal]`, subtotal)
                ];

                // Estructura de la fila
                newRow.innerHTML = `
                    <td>${productName}${hiddenFields.map(input => input.outerHTML).join('')}</td>
                    <td class="text-center">${quantity}</td>
                    <td class="text-right">${formatCurrency(unitPrice)}</td>
                    <td class="text-right" data-subtotal="${subtotal}">${formatCurrency(subtotal)}</td>
                    <td class="text-center">
                        <button type="button" class="delete-button">Eliminar</button>
                    </td>
                `;

                // Agregar evento al botón eliminar
                const deleteButton = newRow.querySelector('.delete-button');
                deleteButton.addEventListener('click', function() {
                    newRow.remove();
                    updateTotal();
                    
                    // Mostrar mensaje de no productos si la tabla está vacía
                    if (addedProductsTable.children.length === 0) {
                        const noProductsRow = document.createElement('tr');
                        noProductsRow.id = 'no-products';
                        noProductsRow.innerHTML = '<td colspan="5" class="text-center">No se han agregado productos</td>';
                        addedProductsTable.appendChild(noProductsRow);
                    }
                });

                // Agregar la fila a la tabla
                addedProductsTable.appendChild(newRow);

                // Limpiar campos
                productInput.value = '';
                quantityInput.value = '1';
                subtotalInput.value = '0';
                
                updateTotal();
            }
        });

    });
</script>

<style>
    .flex-container {
        display: flex;
        justify-content: space-between;
    }

    .left-container, .right-container {
        width: 48%;
    }

    .sale_form-container {
        margin: 20px;
    }

    .sale_item_form-container {
        margin: 20px;
        border: 1px solid black; 
        padding: 20px;
    }

    .field {
        margin-bottom: 10px;
    }

    .form-label {
        display: block;
        margin-bottom: 5px;
        font-font-family: Arial, sans-serif;
    }

    .form-input {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
    }

    .submit-button {
        background-color: #4CAF50;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
        margin: 20px;    
    }

    .submit-button:hover {
        background-color: #45a049;
    }

    .errors-container {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
        padding: 10px;
        margin-bottom: 20px;
    }

    .error-title {
        margin: 0 0 10px 0;
    }

    .error-message {
        margin: 0;
    }

    .table-container {
        margin-top: 20px;
    }

    .items-table {
        width: 100%;
        border-collapse: collapse;
    }

    .items-table th, .items-table td {
        border: 1px solid #ddd;
        padding: 8px;
    }

    .items-table th {
        background-color: #f2f2f2;
        text-align: left;
    }

    .text-center {
        text-align: center;
    }

    .text-right {
        text-align: right;
    }

    .total-input {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        text-align: right;
    }

    .delete-button {
        background-color: #f44336;
        color: white;
        padding: 5px 10px;
        border: none;
        cursor: pointer;
    }

    .delete-button:hover {
        background-color: #e53935;
    }

    .add-item {
        background-color: #008CBA;
        color: white;
        padding: 5px 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .add-item:hover {
        background-color: #007bb5;
    }
</style>
